%{
#include<stdio.h>
#include<string.h>
%}


digit [0-9]
letter [a-zA-Z]
id ({letter}|"_")({letter}|{digit})*
arithop [\+\-\*\/\%]
logicop (\&\&|\|\||\!)
relop [<>!]=?
bitwise "|"|"&"|"^"|"~"|"<<"|">>"
commentstart  "/*"
commentend  "*/"
assnop "="
datatype ("boolean"|"byte"|"short"|"int"|"long"|"float"|"double"|"char"|"String"|"void")
access ("private"|"public"|"proteted")
keyword ("abstract"|"System"|"assert"|"boolean"|"break"|"byte"|"case"|"catch"|"char"|"class"|"const"|"continue"|"default"|"do"|"double"|"else"|"enum"|"extends"|"final"|"finally"|"float"|"for"|"if"|"implements"|"import"|"instanceof"|"int"|"interface"|"long"|"native"|"new"|"package"|"return"|"short"|"static"|"strictfp"|"super"|"switch"|"synchronized"|"this"|"throw"|"throws"|"transient"|"try"|"void"|"volatile"|"while")
funcstart ("System.out.println"|"System.out.print"|"Math."|"String."|"Integer."|"Double."|"Float."|"Boolean."|"Character.")
%x COMMENT
spl [;\(\)\{\},]
functiondefn {id}\(.*\).*"{"
%%
import.*$           printf("Importing Package \t\t-->\t\t %s\n", yytext);
{keyword}       printf("Keyword \t\t-->\t\t %s\n", yytext); 
{datatype}       printf("datatype \t\t-->\t\t %s\n", yytext); 
{funcstart}.* printf("function call \t\t-->\t\t %s\n", yytext); 
{functiondefn}.* {
					printf("function defn \t\t-->\t\t"); 
					int i=0;
					while(yytext[i]!='{')
					{
						printf("%c",yytext[i]);
						i++;
					}
					printf("\n");
					printf("Spl char \t\t-->\t\t {\n");
				}

"/*"            { BEGIN(COMMENT); printf("Multiline comment \t\t-->\t\t %s", yytext);}
<COMMENT>"*/"   { BEGIN(INITIAL); printf("%s\n", yytext); }
{access}	printf("Access Specifiers \t\t-->\t\t %s\n", yytext);
"//"(.*)$      printf("Singleline Comment \t\t-->\t\t %s\n", yytext);
{digit}+      printf("Number \t\t\t-->\t\t %s\n", yytext);
{id}          printf("Identifier \t\t-->\t\t %s\n", yytext);
({id}"[".*"]")          printf("Identifier \t\t-->\t\t %s\n", yytext);
\.{id}		printf("Attribute call \t\t-->\t\t %s\n", yytext);
\.{id}\(\)		printf("Attribute function call -->\t\t %s\n", yytext);
{bitwise}          printf("bitwise operator \t\t-->\t\t %s\n", yytext);
{arithop} printf("Arithmetic operator \t-->\t\t %s\n", yytext);
{arithop}{assnop} printf("Arithmetic assignment operator \t-->\t\t %s\n", yytext);
{relop}       printf("Relational operator \t-->\t\t %s\n", yytext);
{assnop} printf("assignment operator \t-->\t\t %s\n", yytext);
{relop}{assnop}       printf("Relational assignment operator \t\t-->\t\t %s\n", yytext);
{assnop}{assnop}       printf("Relational operator \t\t-->\t\t %s\n", yytext);
{logicop}       printf("Logical operator \t\t-->\t\t %s\n", yytext);
{spl}			printf("Spl char \t\t-->\t\t %s\n", yytext);
" " { } ;           /* skip whitespace */
"\n" { } ;             /* skip newlines */
"\t" { } ;             /* skip tabs */

%%

int yywrap(void){}

int main(int argc, char* argv[]) {
    FILE *file;

    if (argc < 2) {
        fprintf(stderr, "Usage --> %s file\n", argv[0]);
        return 1;
    }

    file = fopen(argv[1], "r");
    if (file == NULL) {
        fprintf(stderr, "Error --> Unable to open file %s\n", argv[1]);
        return 1;
    }

    yyin = file;
    yylex();

    fclose(file);
    return 0;
}
